db = RSQLite::dbConnect(RSQLite::SQLite(), "C:/WEHAM/weham_comp/test/weham_out_2012_notRandom_JungInWZP_Verj_aus_NatWG_test.sqlite")
ti = RSQLite::dbGetQuery(db, "SELECT * FROM wehamo_wzp WHERE PJahr = 2012 AND PArt = 0")
ch = RODBC::odbcConnectAccess("C:/WEHAM_FVA_debug/WEHAM_OUTPUTXX42.mdb")
fva = RODBC::sqlQuery("SELECT * FROM wehamo_wzp WHERE PJahr = 2012 AND PArt = 0")
fva = RODBC::sqlQuery(ch, "SELECT * FROM wehamo_wzp WHERE PJahr = 2012 AND PArt = 0")
RODBC::odbcCloseAll()
#------------------------------------------------------------------
# main
#-----------------------------------------------------------------
db = RSQLite::dbConnect(RSQLite::SQLite(), "C:/WEHAM/weham_comp/test/weham_out_2012_notRandom_JungInWZP_Verj_aus_NatWG_test.sqlite")
ti = RSQLite::dbGetQuery(db, "SELECT * FROM wehamo_wzp WHERE PJahr = 2012 OR PJahr = 2017 AND PArt = 0")
RSQLite::dbDisconnect(db)
ti$ID = paste(ti$Tnr, ti$Enr, ti$Bnr, ti$Ba)
ti_12 = ti[ti$PJahr == 2012, ]
ti = ti[ti$BID %in% ti_12$BID, ]
ch = RODBC::odbcConnectAccess("C:/WEHAM_FVA_debug/WEHAM_OUTPUTXX42.mdb")
fva = RODBC::sqlQuery(ch, "SELECT * FROM wehamo_wzp WHERE PJahr = 2012 OR PJahr = 2017 AND PArt = 0")
RODBC::odbcCloseAll()
fva = fva[fva$PArt == 0, ]
fva$ID = paste(fva$Tnr, fva$Enr, fva$Bnr, fva$Ba)
fva_12 = fva[fva$PJahr == 2012, ]
fva = fva[fva$BID %in% fva_12$BID, ]
merge_12 = merge(ti_12, fva_12, by ="ID")
# plot(merge_12$Balter.x ~ merge_12$Balter.y)
#
# plot(merge_12$Hoe.x ~ merge_12$Hoe.y)
#
# plot(merge_12$Bhd.x ~ merge_12$Bhd.y)
plot(merge_12$N_ha.x ~ merge_12$N_ha.y, main="N_ha 2012", xlab= "FVA", ylab="TI")
map_BID = hash::hash()
# key is BID_ti and value is BID_fva
for(i in 1:nrow(merge_12)) {
map_BID[[as.character(merge_12$BID.x[i])]] = as.character(merge_12$BID.y[i])
}
# i = 37484
#
# merge_12[merge_12$BID.x == 50559,]
year = 2017
ti_test = ti[ti$PJahr == year, ]
fva_test = fva[fva$PJahr == year, ]
fva_test$BID = as.character(fva_test$BID)
ti_test$BID = as.character(ti_test$BID)
ti_BID = ti_test$BID
# die BID_fva werden jetzt den BID_ti zugewiesen
for(i in 1:length(ti_BID)) {
ti_BID[i] = map_BID[[ti_BID[i]]]
}
ti_test$BID = ti_BID
merge_test = merge(ti_test, fva_test, by = "BID")
# plot(merge_test$Balter.x ~ merge_test$Balter.y,
#      main = paste("Alter", year),
#      ylab = "TI",
#      xlab = "FVA")
png("C:/WEHAM/Vergleich FVA TI/tmp.png", width = 800, height = 600)
plot(jitter(merge_test$N_ha.x, factor = 1.2) ~ jitter(merge_test$N_ha.y, factor = 1.2),
main = paste("N_ha", year),
ylab = "TI",
xlab = "FVA")
curve(1*x, add=T)
dev.off()
ti = readLines("C:/WEHAM/weham_comp/output_202408081245.log", encoding = "UTF-8")
ti_tr = ti[regexpr(pattern = "Test_Eingriff:", ti) > 0]
ti_tr_real = ti[regexpr(pattern = "Test_real_Eingriff:", ti) > 0]
ti_eck = ti[regexpr(pattern = "Test_Eck_Anz:", ti) > 0]
ti_eck_loop = ti[regexpr(pattern = "Test_Eck_loop:", ti) > 0]
eck_test = character()
for(i in 1:length(ti_eck_loop)) {
tmp = ti_eck_loop[i]
eck_test[i] = substr(tmp, start=regexpr(":", tmp) + 2, stop=nchar(tmp))
}
hist(table(eck_test))
fva = readLines("C:/WEHAM_FVA_debug/Protokolldatei42.txt", encoding = "UTF-8")
fva_tr = fva[regexpr(pattern = "Test_Eingriff:", fva) > 0]
fva_tr_real = fva[regexpr(pattern = "Test_real_Eingriff:", fva) > 0]
fva_eck = fva[regexpr(pattern = "Test_Eck_Anz:", fva) > 0]
length(ti_eck)
length(fva_eck)
fva_tr
#------------------------------------------------------------------
# main
#-----------------------------------------------------------------
db = RSQLite::dbConnect(RSQLite::SQLite(), "C:/WEHAM/weham_comp/test/weham_out_2012_notRandom_JungInWZP_Verj_aus_NatWG_test.sqlite")
ti = RSQLite::dbGetQuery(db, "SELECT * FROM wehamo_wzp WHERE PJahr = 2012 OR PJahr = 2017 AND PArt = 0")
RSQLite::dbDisconnect(db)
ti$ID = paste(ti$Tnr, ti$Enr, ti$Bnr, ti$Ba)
ti_12 = ti[ti$PJahr == 2012, ]
ti = ti[ti$BID %in% ti_12$BID, ]
ch = RODBC::odbcConnectAccess("C:/WEHAM_FVA_debug/WEHAM_OUTPUTXX42.mdb")
fva = RODBC::sqlQuery(ch, "SELECT * FROM wehamo_wzp WHERE PJahr = 2012 OR PJahr = 2017 AND PArt = 0")
RODBC::odbcCloseAll()
fva = fva[fva$PArt == 0, ]
fva$ID = paste(fva$Tnr, fva$Enr, fva$Bnr, fva$Ba)
fva_12 = fva[fva$PJahr == 2012, ]
fva = fva[fva$BID %in% fva_12$BID, ]
merge_12 = merge(ti_12, fva_12, by ="ID")
# plot(merge_12$Balter.x ~ merge_12$Balter.y)
#
# plot(merge_12$Hoe.x ~ merge_12$Hoe.y)
#
# plot(merge_12$Bhd.x ~ merge_12$Bhd.y)
plot(merge_12$N_ha.x ~ merge_12$N_ha.y, main="N_ha 2012", xlab= "FVA", ylab="TI")
map_BID = hash::hash()
# key is BID_ti and value is BID_fva
for(i in 1:nrow(merge_12)) {
map_BID[[as.character(merge_12$BID.x[i])]] = as.character(merge_12$BID.y[i])
}
# i = 37484
#
# merge_12[merge_12$BID.x == 50559,]
year = 2017
ti_test = ti[ti$PJahr == year, ]
fva_test = fva[fva$PJahr == year, ]
fva_test$BID = as.character(fva_test$BID)
ti_test$BID = as.character(ti_test$BID)
ti_BID = ti_test$BID
# die BID_fva werden jetzt den BID_ti zugewiesen
for(i in 1:length(ti_BID)) {
ti_BID[i] = map_BID[[ti_BID[i]]]
}
ti_test$BID = ti_BID
merge_test = merge(ti_test, fva_test, by = "BID")
# plot(merge_test$Balter.x ~ merge_test$Balter.y,
#      main = paste("Alter", year),
#      ylab = "TI",
#      xlab = "FVA")
ti_test
fva_test
ti_test
fva_test
png("C:/WEHAM/Vergleich FVA TI/tmp.png", width = 800, height = 600)
plot(jitter(merge_test$N_ha.x, factor = 1.2) ~ jitter(merge_test$N_ha.y, factor = 1.2),
main = paste("N_ha", year),
ylab = "TI",
xlab = "FVA")
curve(1*x, add=T)
dev.off()
ti = readLines("C:/WEHAM/weham_comp/output_202408081259.log", encoding = "UTF-8")
ti_tr = ti[regexpr(pattern = "Test_Eingriff:", ti) > 0]
ti_tr_real = ti[regexpr(pattern = "Test_real_Eingriff:", ti) > 0]
ti_eck = ti[regexpr(pattern = "Test_Eck_Anz:", ti) > 0]
ti_eck_loop = ti[regexpr(pattern = "Test_Eck_loop:", ti) > 0]
eck_test = character()
for(i in 1:length(ti_eck_loop)) {
tmp = ti_eck_loop[i]
eck_test[i] = substr(tmp, start=regexpr(":", tmp) + 2, stop=nchar(tmp))
}
hist(table(eck_test))
fva = readLines("C:/WEHAM_FVA_debug/Protokolldatei42.txt", encoding = "UTF-8")
fva_tr = fva[regexpr(pattern = "Test_Eingriff:", fva) > 0]
fva_tr_real = fva[regexpr(pattern = "Test_real_Eingriff:", fva) > 0]
fva_eck = fva[regexpr(pattern = "Test_Eck_Anz:", fva) > 0]
length(ti_eck)
length(fva_eck)
ti_eck
length(ti_tr)
length(fva_tr)
hist(table(ti_tr))
hist(table(fva_tr))
ti_tr
fva_trees = character()
fva_DFArt = character()
for(i in 1: length(fva_tr)) {
tmp = fva_tr[i]
fva_trees[i] = substr(x = tmp, start = regexpr(":", tmp) + 2, stop = regexpr("->", tmp) - 2)
fva_DFArt[i] = substr(x = tmp, start = regexpr("->", tmp) + 3, stop = nchar(tmp))
}
fva_trees
fva_trees_real = character()
fva_DFArt_real = character()
for(i in 1: length(fva_tr_real)) {
tmp = fva_tr_real[i]
fva_trees_real[i] = substr(x = tmp, start = regexpr(":", tmp) + 2, stop = regexpr("->", tmp) - 2)
fva_DFArt_real[i] = substr(x = tmp, start = regexpr("->", tmp) + 3, stop = nchar(tmp))
}
fva_df = data.frame("ID" = fva_trees, "DFArt" = fva_DFArt)
fva_real_df = data.frame("ID" = fva_trees_real, "DFArt" = fva_DFArt_real)
fva_eck_ID = character()
fva_Anz = character()
for(i in 1: length(fva_eck)) {
tmp = fva_eck[i]
fva_eck_ID[i] = substr(x = tmp, start = regexpr(":", tmp) + 2, stop = regexpr("->", tmp) - 2)
fva_Anz[i] = substr(x = tmp, start = regexpr("->", tmp) + 3, stop = nchar(tmp))
}
fva_eck_df = data.frame("ID" = fva_eck_ID, "Anz" = fva_Anz)
ti_trees = character()
ti_DFArt = character()
for(i in 1: length(ti_tr)) {
tmp = ti_tr[i]
ti_trees[i] = substr(x = tmp, start = regexpr(":", tmp) + 2, stop = regexpr("->", tmp) - 2)
ti_DFArt[i] = substr(x = tmp, start = regexpr("->", tmp) + 3, stop = nchar(tmp)-1)
}
ti_trees_real = character()
ti_DFArt_real = character()
for(i in 1: length(ti_tr_real)) {
tmp = ti_tr_real[i]
ti_trees_real[i] = substr(x = tmp, start = regexpr(":", tmp) + 2, stop = regexpr("->", tmp) - 2)
ti_DFArt_real[i] = substr(x = tmp, start = regexpr("->", tmp) + 3, stop = nchar(tmp)-1)
}
ti_trees
table(ti_trees)
hist(table(ti_trees))
hist(table(ti_trees_real))
ti_eck
hist(table(ti_eck_ID))
length(ti_trees)
length(fva_trees)
for(i in 1:length(ti_trees)) {
ti_trees[i] = map_BID[[ti_trees[i]]]
}
for(i in 1:length(ti_trees_real)) {
ti_trees_real[i] = map_BID[[ti_trees_real[i]]]
}
ti_df = data.frame("ID" = ti_trees, "DFArt" = ti_DFArt)
ti_real_df = data.frame("ID" = ti_trees_real, "DFArt" = ti_DFArt_real)
merge_ti = merge(ti_df, ti_real_df, by ="ID", all = T)
merge_ti
names(merge_ti) = c("ID", "DFArt.ti", "DFArt_real.ti")
merge_ti[is.na(merge_ti$DFArt.x),]
merge_ti
merge_ti[is.na(merge_ti$DFArt.ti.),]
merge_ti[is.na(merge_ti$DFArt.ti),]
length(ti_trees)
length(fva_trees)
length(ti_trees_real)
length(fva_trees_real)
for(i in 1:length(ti_trees)) {
ti_trees[i] = map_BID[[ti_trees[i]]]
}
for(i in 1:length(ti_trees_real)) {
ti_trees_real[i] = map_BID[[ti_trees_real[i]]]
}
i
map_BID[[ti_trees_real[i]]]
ti_trees_real[i]
ti_trees_real[i]
map_BID[[ti_trees_real[i]]]
#------------------------------------------------------------------
# main
#-----------------------------------------------------------------
db = RSQLite::dbConnect(RSQLite::SQLite(), "C:/WEHAM/weham_comp/test/weham_out_2012_notRandom_JungInWZP_Verj_aus_NatWG_test.sqlite")
ti = RSQLite::dbGetQuery(db, "SELECT * FROM wehamo_wzp WHERE PJahr = 2012 OR PJahr = 2017 AND PArt = 0")
RSQLite::dbDisconnect(db)
ti$ID = paste(ti$Tnr, ti$Enr, ti$Bnr, ti$Ba)
ti_12 = ti[ti$PJahr == 2012, ]
ti = ti[ti$BID %in% ti_12$BID, ]
ch = RODBC::odbcConnectAccess("C:/WEHAM_FVA_debug/WEHAM_OUTPUTXX42.mdb")
fva = RODBC::sqlQuery(ch, "SELECT * FROM wehamo_wzp WHERE PJahr = 2012 OR PJahr = 2017 AND PArt = 0")
RODBC::odbcCloseAll()
fva = fva[fva$PArt == 0, ]
fva$ID = paste(fva$Tnr, fva$Enr, fva$Bnr, fva$Ba)
fva_12 = fva[fva$PJahr == 2012, ]
fva = fva[fva$BID %in% fva_12$BID, ]
merge_12 = merge(ti_12, fva_12, by ="ID")
# plot(merge_12$Balter.x ~ merge_12$Balter.y)
#
# plot(merge_12$Hoe.x ~ merge_12$Hoe.y)
#
# plot(merge_12$Bhd.x ~ merge_12$Bhd.y)
plot(merge_12$N_ha.x ~ merge_12$N_ha.y, main="N_ha 2012", xlab= "FVA", ylab="TI")
map_BID = hash::hash()
# key is BID_ti and value is BID_fva
for(i in 1:nrow(merge_12)) {
map_BID[[as.character(merge_12$BID.x[i])]] = as.character(merge_12$BID.y[i])
}
# i = 37484
#
# merge_12[merge_12$BID.x == 50559,]
year = 2017
ti_test = ti[ti$PJahr == year, ]
fva_test = fva[fva$PJahr == year, ]
fva_test$BID = as.character(fva_test$BID)
ti_test$BID = as.character(ti_test$BID)
ti_BID = ti_test$BID
# die BID_fva werden jetzt den BID_ti zugewiesen
for(i in 1:length(ti_BID)) {
ti_BID[i] = map_BID[[ti_BID[i]]]
}
ti_test$BID = ti_BID
merge_test = merge(ti_test, fva_test, by = "BID")
# plot(merge_test$Balter.x ~ merge_test$Balter.y,
#      main = paste("Alter", year),
#      ylab = "TI",
#      xlab = "FVA")
png("C:/WEHAM/Vergleich FVA TI/tmp.png", width = 800, height = 600)
plot(jitter(merge_test$N_ha.x, factor = 1.2) ~ jitter(merge_test$N_ha.y, factor = 1.2),
main = paste("N_ha", year),
ylab = "TI",
xlab = "FVA")
curve(1*x, add=T)
dev.off()
merge_test[merge_test$N_ha.x == 10000,]
merge_test$N_ha.y[merge_test$N_ha.x == 10000]
hist(merge_test$N_ha.y[merge_test$N_ha.x == 10000])
hist(merge_test$N_ha.y[merge_test$N_ha.x == 10000], main ="Häufigkeit FVA")
hist(merge_test$N_ha.x[merge_test$N_ha.y == 10000], main ="Häufigkeit TI")
merge_ti
#------------------------------------------------------------------
# main
#-----------------------------------------------------------------
db = RSQLite::dbConnect(RSQLite::SQLite(), "C:/WEHAM/weham_comp/test/weham_out_2012_notRandom_JungInWZP_Verj_aus_NatWG_test.sqlite")
ti = RSQLite::dbGetQuery(db, "SELECT * FROM wehamo_wzp WHERE PJahr = 2012 OR PJahr = 2017 AND PArt = 0")
RSQLite::dbDisconnect(db)
ti$ID = paste(ti$Tnr, ti$Enr, ti$Bnr, ti$Ba)
ti_12 = ti[ti$PJahr == 2012, ]
ti = ti[ti$BID %in% ti_12$BID, ]
ti
ti$AJahr
unique(ti$AJahr)
ti = RSQLite::dbGetQuery(db, "SELECT * FROM wehamo_wzp WHERE PJahr = 2012 OR PJahr = 2017")
db = RSQLite::dbConnect(RSQLite::SQLite(), "C:/WEHAM/weham_comp/test/weham_out_2012_notRandom_JungInWZP_Verj_aus_NatWG_test.sqlite")
ti = RSQLite::dbGetQuery(db, "SELECT * FROM wehamo_wzp WHERE PJahr = 2012 OR PJahr = 2017")
unique(ti$AJahr)
unique(ti$PJahr)
unique(ti$PArt)
db = RSQLite::dbConnect(RSQLite::SQLite(), "C:/WEHAM/weham_comp/test/weham_out_2012_notRandom_JungInWZP_Verj_aus_NatWG_test.sqlite")
ti = RSQLite::dbGetQuery(db, "SELECT * FROM wehamo_wzp WHERE PJahr = 2012 OR PJahr = 2017 AND PArt = 0")
RSQLite::dbDisconnect(db)
ti$ID = paste(ti$Tnr, ti$Enr, ti$Bnr, ti$Ba)
ti_12 = ti[ti$PJahr == 2012, ]
ti = ti[ti$BID %in% ti_12$BID, ]
ti
ch = RODBC::odbcConnectAccess("C:/WEHAM_FVA_debug/WEHAM_OUTPUTXX42.mdb")
fva = RODBC::sqlQuery(ch, "SELECT * FROM wehamo_wzp WHERE PJahr = 2012 OR PJahr = 2017 AND PArt = 0")
RODBC::odbcCloseAll()
fva = fva[fva$PArt == 0, ]
fva$ID = paste(fva$Tnr, fva$Enr, fva$Bnr, fva$Ba)
fva_12 = fva[fva$PJahr == 2012, ]
fva = fva[fva$BID %in% fva_12$BID, ]
fva
merge_12 = merge(ti_12, fva_12, by ="ID")
plot(merge_12$N_ha.x ~ merge_12$N_ha.y, main="N_ha 2012", xlab= "FVA", ylab="TI")
map_BID = hash::hash()
for(i in 1:nrow(merge_12)) {
map_BID[[as.character(merge_12$BID.x[i])]] = as.character(merge_12$BID.y[i])
}
year = 2017
ti_test = ti[ti$PJahr == year, ]
fva_test = fva[fva$PJahr == year, ]
fva_test$BID = as.character(fva_test$BID)
ti_test$BID = as.character(ti_test$BID)
ti_BID = ti_test$BID
for(i in 1:length(ti_BID)) {
ti_BID[i] = map_BID[[ti_BID[i]]]
}
ti_test$BID = ti_BID
merge_test = merge(ti_test, fva_test, by = "BID")
png("C:/WEHAM/Vergleich FVA TI/tmp.png", width = 800, height = 600)
plot(jitter(merge_test$N_ha.x, factor = 1.2) ~ jitter(merge_test$N_ha.y, factor = 1.2),
main = paste("N_ha", year),
ylab = "TI",
xlab = "FVA")
curve(1*x, add=T)
dev.off()
#------------------------------------------------------------------
# main
#-----------------------------------------------------------------
db = RSQLite::dbConnect(RSQLite::SQLite(), "C:/WEHAM/weham_comp/test/weham_out_2012_notRandom_JungInWZP_Verj_aus_NatWG_test.sqlite")
ti = RSQLite::dbGetQuery(db, "SELECT * FROM wehamo_wzp WHERE PJahr = 2012 OR PJahr = 2017 AND PArt = 0")
RSQLite::dbDisconnect(db)
ti$ID = paste(ti$Tnr, ti$Enr, ti$Bnr, ti$Ba)
ti_12 = ti[ti$PJahr == 2012, ]
ti = ti[ti$BID %in% ti_12$BID, ]
ch = RODBC::odbcConnectAccess("C:/WEHAM_FVA_debug/WEHAM_OUTPUTXX42.mdb")
fva = RODBC::sqlQuery(ch, "SELECT * FROM wehamo_wzp WHERE PJahr = 2012 OR PJahr = 2017 AND PArt = 0")
RODBC::odbcCloseAll()
fva = fva[fva$PArt == 0, ]
fva$ID = paste(fva$Tnr, fva$Enr, fva$Bnr, fva$Ba)
fva_12 = fva[fva$PJahr == 2012, ]
fva = fva[fva$BID %in% fva_12$BID, ]
merge_12 = merge(ti_12, fva_12, by ="ID")
# plot(merge_12$Balter.x ~ merge_12$Balter.y)
#
# plot(merge_12$Hoe.x ~ merge_12$Hoe.y)
#
# plot(merge_12$Bhd.x ~ merge_12$Bhd.y)
plot(merge_12$N_ha.x ~ merge_12$N_ha.y, main="N_ha 2012", xlab= "FVA", ylab="TI")
map_BID = hash::hash()
# key is BID_ti and value is BID_fva
for(i in 1:nrow(merge_12)) {
map_BID[[as.character(merge_12$BID.x[i])]] = as.character(merge_12$BID.y[i])
}
# i = 37484
#
# merge_12[merge_12$BID.x == 50559,]
year = 2017
ti_test = ti[ti$PJahr == year, ]
fva_test = fva[fva$PJahr == year, ]
fva_test$BID = as.character(fva_test$BID)
ti_test$BID = as.character(ti_test$BID)
ti_BID = ti_test$BID
# die BID_fva werden jetzt den BID_ti zugewiesen
for(i in 1:length(ti_BID)) {
ti_BID[i] = map_BID[[ti_BID[i]]]
}
ti_test$BID = ti_BID
merge_test = merge(ti_test, fva_test, by = "BID")
# plot(merge_test$Balter.x ~ merge_test$Balter.y,
#      main = paste("Alter", year),
#      ylab = "TI",
#      xlab = "FVA")
png("C:/WEHAM/Vergleich FVA TI/tmp.png", width = 800, height = 600)
plot(jitter(merge_test$N_ha.x, factor = 1.2) ~ jitter(merge_test$N_ha.y, factor = 1.2),
main = paste("N_ha", year),
ylab = "TI",
xlab = "FVA")
curve(1*x, add=T)
dev.off()
ti = readLines("C:/WEHAM/weham_comp/output_202408081517.log", encoding = "UTF-8")
ti_tr = ti[regexpr(pattern = "Test_Eingriff:", ti) > 0]
ti_tr_real = ti[regexpr(pattern = "Test_real_Eingriff:", ti) > 0]
ti_eck = ti[regexpr(pattern = "Test_Eck_Anz:", ti) > 0]
ti_eck_loop = ti[regexpr(pattern = "Test_Eck_loop:", ti) > 0]
eck_test = character()
for(i in 1:length(ti_eck_loop)) {
tmp = ti_eck_loop[i]
eck_test[i] = substr(tmp, start=regexpr(":", tmp) + 2, stop=nchar(tmp))
}
hist(table(eck_test))
fva = readLines("C:/WEHAM_FVA_debug/Protokolldatei42.txt", encoding = "UTF-8")
fva_tr = fva[regexpr(pattern = "Test_Eingriff:", fva) > 0]
fva_tr_real = fva[regexpr(pattern = "Test_real_Eingriff:", fva) > 0]
fva_eck = fva[regexpr(pattern = "Test_Eck_Anz:", fva) > 0]
length(ti_eck)
length(fva_eck)
length(ti_eck)
length(fva_eck)
length(ti_tr)
length(fva_tr)
ti_tr
fva_tr
hist(table(ti_tr))
hist(table(fva_tr))
length(ti_tr_real)
length(fva_tr_real)
length(ti_tr)
length(fva_tr)
fva_trees = character()
fva_DFArt = character()
for(i in 1: length(fva_tr)) {
tmp = fva_tr[i]
fva_trees[i] = substr(x = tmp, start = regexpr(":", tmp) + 2, stop = regexpr("->", tmp) - 2)
fva_DFArt[i] = substr(x = tmp, start = regexpr("->", tmp) + 3, stop = nchar(tmp))
}
fva_trees_real = character()
fva_DFArt_real = character()
for(i in 1: length(fva_tr_real)) {
tmp = fva_tr_real[i]
fva_trees_real[i] = substr(x = tmp, start = regexpr(":", tmp) + 2, stop = regexpr("->", tmp) - 2)
fva_DFArt_real[i] = substr(x = tmp, start = regexpr("->", tmp) + 3, stop = nchar(tmp))
}
fva_df = data.frame("ID" = fva_trees, "DFArt" = fva_DFArt)
fva_real_df = data.frame("ID" = fva_trees_real, "DFArt" = fva_DFArt_real)
fva_eck_ID = character()
fva_Anz = character()
for(i in 1: length(fva_eck)) {
tmp = fva_eck[i]
fva_eck_ID[i] = substr(x = tmp, start = regexpr(":", tmp) + 2, stop = regexpr("->", tmp) - 2)
fva_Anz[i] = substr(x = tmp, start = regexpr("->", tmp) + 3, stop = nchar(tmp))
}
fva_eck_df = data.frame("ID" = fva_eck_ID, "Anz" = fva_Anz)
ti_trees = character()
ti_DFArt = character()
for(i in 1: length(ti_tr)) {
tmp = ti_tr[i]
ti_trees[i] = substr(x = tmp, start = regexpr(":", tmp) + 2, stop = regexpr("->", tmp) - 2)
ti_DFArt[i] = substr(x = tmp, start = regexpr("->", tmp) + 3, stop = nchar(tmp)-1)
}
ti_trees_real = character()
ti_DFArt_real = character()
for(i in 1: length(ti_tr_real)) {
tmp = ti_tr_real[i]
ti_trees_real[i] = substr(x = tmp, start = regexpr(":", tmp) + 2, stop = regexpr("->", tmp) - 2)
ti_DFArt_real[i] = substr(x = tmp, start = regexpr("->", tmp) + 3, stop = nchar(tmp)-1)
}
hist(table(ti_trees))
hist(table(ti_trees_real))
length(ti_trees)
length(fva_trees)
length(ti_trees_real)
length(fva_trees_real)
for(i in 1:length(ti_trees)) {
ti_trees[i] = map_BID[[ti_trees[i]]]
}
for(i in 1:length(ti_trees_real)) {
ti_trees_real[i] = map_BID[[ti_trees_real[i]]]
}
ti_df = data.frame("ID" = ti_trees, "DFArt" = ti_DFArt)
ti_real_df = data.frame("ID" = ti_trees_real, "DFArt" = ti_DFArt_real)
merge_ti = merge(ti_df, ti_real_df, by ="ID", all = T)
names(merge_ti) = c("ID", "DFArt.ti", "DFArt_real.ti")
merge_ti[is.na(merge_ti$DFArt.ti),]
merge_test[merge_test$BID == 0, ]
suspect_ti = merge_ti[merge_ti$DFArt.ti != merge_ti$DFArt_real.ti,]
suspect_ti
suspect_ti$ID
unique(suspect_ti$DFArt.ti)
unique(suspect_ti$DFArt_real.ti)
merge_fva = merge(fva_df, fva_real_df, by ="ID", all.x = T)
names(merge_fva) = c("ID", "DFArt.fva", "DFArt_real.fva")
merge_fva[is.na(merge_fva$DFArt_real.fva),]
sum(is.na(merge_fva$DFArt.fva))
merge_fva
suspect_fva = merge_fva[merge_fva$DFArt.fva != merge_fva$DFArt_real.fva,]
suspect_fva
unique(suspect_fva$DFArt.fva)
unique(suspect_fva$DFArt_real.fva)
merge_real = merge(fva_real_df, ti_real_df, by ="ID")
hist(table(ti_real_df$ID))
hist(table(fva_real_df$ID))
names(merge_real) = c("ID", "DFArt_real.fva", "DFArt_real.ti")
merge_real[merge_real$DFArt_real.fva != merge_real$DFArt_real.ti, ]
